#!/usr/bin/env bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
REPO_ROOT="$(git rev-parse --show-toplevel)"
SECRETS_DIR="${REPO_ROOT}/secrets"
SECRETS_NIX="${SECRETS_DIR}/secrets.nix"

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check dependencies
check_dependencies() {
    local deps=("agenix" "openssl")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            log_error "Required dependency '$dep' not found"
            exit 1
        fi
    done
}

# Generate JWT secret
generate_jwt_secret() {
    openssl rand -base64 32
}

# Generate Supabase API key
generate_api_key() {
    local payload='{"role":"'"$1"'","iss":"supabase"}'
    local secret="$2"
    
    # Create a simple JWT manually
    local header='{"alg":"HS256","typ":"JWT"}'
    local header_b64=$(echo -n "$header" | base64 -w 0 | tr -d '=')
    local payload_b64=$(echo -n "$payload" | base64 -w 0 | tr -d '=')
    local signature=$(echo -n "${header_b64}.${payload_b64}" | openssl dgst -sha256 -hmac "$secret" -binary | base64 -w 0 | tr -d '=')
    
    echo "${header_b64}.${payload_b64}.${signature}"
}

# Generate database URL
generate_database_url() {
    local instance="$1"
    local password=$(openssl rand -base64 16 | tr -d '=')
    echo "postgresql://supabase_${instance}:${password}@localhost:5432/supabase_${instance}"
}

# Update secret file
update_secret_file() {
    local secret_name="$1"
    local secret_value="$2"
    
    local secret_file="${SECRETS_DIR}/${secret_name}.age"
    
    if [[ ! -f "$secret_file" ]]; then
        log_error "Secret file '$secret_file' does not exist"
        return 1
    fi
    
    # Backup old secret
    cp "$secret_file" "${secret_file}.backup.$(date +%s)"
    
    # Use agenix to encrypt the new secret
    cd "$SECRETS_DIR"
    agenix -e "${secret_name}.age" <<< "$secret_value"
    
    log_success "Updated secret file: $secret_file"
}

# Main function
main() {
    if [[ $# -ne 2 ]]; then
        echo "Usage: $0 <instance-name> <secret-type>"
        echo "Secret types: jwt, anon, service, db"
        echo "Example: $0 prod jwt"
        exit 1
    fi
    
    local instance="$1"
    local secret_type="$2"
    
    log_info "Updating Supabase secret for instance: $instance, type: $secret_type"
    
    # Check dependencies
    check_dependencies
    
    # Determine secret name and generate new value
    local secret_name
    local secret_value
    
    case "$secret_type" in
        "jwt")
            secret_name="supabase-${instance}-jwt"
            secret_value="JWT_SECRET=$(generate_jwt_secret)"
            log_warning "Updating JWT secret will invalidate all existing API keys!"
            ;;
        "anon")
            secret_name="supabase-${instance}-anon"
            # Need to get current JWT secret to regenerate anon key
            local jwt_secret_file="${SECRETS_DIR}/supabase-${instance}-jwt.age"
            if [[ ! -f "$jwt_secret_file" ]]; then
                log_error "JWT secret file not found. Cannot generate anon key."
                exit 1
            fi
            # This would require decryption - simplified for demo
            log_error "Anon key regeneration requires JWT secret. Please regenerate JWT first, then anon and service keys."
            exit 1
            ;;
        "service")
            secret_name="supabase-${instance}-service"
            # Same issue as anon key
            log_error "Service key regeneration requires JWT secret. Please regenerate JWT first, then anon and service keys."
            exit 1
            ;;
        "db")
            secret_name="supabase-${instance}-dbpass"
            secret_value="DB_PASSWORD=$(openssl rand -base64 32 | tr -d '\n')"
            ;;
        *)
            log_error "Unknown secret type: $secret_type"
            echo "Valid types: jwt, anon, service, db"
            exit 1
            ;;
    esac
    
    # Update the secret
    update_secret_file "$secret_name" "$secret_value"
    
    log_success "Secret '$secret_name' updated successfully!"
    
    if [[ "$secret_type" == "jwt" ]]; then
        echo
        log_warning "JWT secret updated. You should now regenerate anon and service keys:"
        echo "  $0 $instance anon"
        echo "  $0 $instance service"
    fi
    
    if [[ "$secret_type" == "db" ]]; then
        echo
        log_warning "Database URL updated. Make sure to update the database password accordingly."
        echo "New connection string: $secret_value"
    fi
}

main "$@"