#!/usr/bin/env bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
REPO_ROOT="$(git rev-parse --show-toplevel)"
SECRETS_DIR="${REPO_ROOT}/secrets"
SECRETS_NIX="${SECRETS_DIR}/secrets.nix"

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check dependencies
check_dependencies() {
    local deps=("agenix" "openssl")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            log_error "Required dependency '$dep' not found"
            exit 1
        fi
    done
}

# Generate JWT secret
generate_jwt_secret() {
    openssl rand -base64 32
}

# Generate Supabase API key
generate_api_key() {
    local payload='{"role":"'"$1"'","iss":"supabase"}'
    local secret="$2"
    
    # Create a simple JWT manually (for demo - in production use proper JWT library)
    local header='{"alg":"HS256","typ":"JWT"}'
    local header_b64=$(echo -n "$header" | base64 -w 0 | tr -d '=')
    local payload_b64=$(echo -n "$payload" | base64 -w 0 | tr -d '=')
    local signature=$(echo -n "${header_b64}.${payload_b64}" | openssl dgst -sha256 -hmac "$secret" -binary | base64 -w 0 | tr -d '=')
    
    echo "${header_b64}.${payload_b64}.${signature}"
}

# Generate database URL
generate_database_url() {
    local instance="$1"
    local password=$(openssl rand -base64 16 | tr -d '=')
    echo "postgresql://supabase_${instance}:${password}@localhost:5432/supabase_${instance}"
}

# Create secret file
create_secret_file() {
    local secret_name="$1"
    local secret_value="$2"
    
    local secret_file="${SECRETS_DIR}/${secret_name}.age"
    
    # Check if secret already exists in secrets.nix
    if ! grep -q "\"${secret_name}.age\"" "$SECRETS_NIX"; then
        log_error "Secret '$secret_name' not found in secrets.nix. Add it first with add_secret_to_nix."
        return 1
    fi
    
    # Create temporary file with secret
    local temp_file=$(mktemp)
    echo -n "$secret_value" > "$temp_file"
    
    # Use agenix to encrypt the secret
    cd "$SECRETS_DIR"
    agenix -e "${secret_name}.age" <<< "$secret_value"
    
    # Clean up
    rm "$temp_file"
    
    log_success "Created secret file: $secret_file"
}

# Add secret to secrets.nix
add_secret_to_nix() {
    local secret_name="$1"
    local hosts="$2"
    
    # Check if secret already exists
    if grep -q "\"${secret_name}.age\"" "$SECRETS_NIX"; then
        log_warning "Secret '$secret_name' already exists in secrets.nix"
        return 0
    fi
    
    # Add the secret entry
    local entry="  \"${secret_name}.age\".publicKeys = users ++ [${hosts}];"
    
    # Insert before the closing brace
    sed -i "/^}$/i\\$entry" "$SECRETS_NIX"
    
    log_success "Added secret '$secret_name' to secrets.nix"
}

# Main function
main() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: $0 <instance-name>"
        echo "Example: $0 prod"
        exit 1
    fi
    
    local instance="$1"
    
    log_info "Creating Supabase instance: $instance"
    
    # Check dependencies
    check_dependencies
    
    # Generate secrets
    log_info "Generating secrets..."
    local jwt_secret=$(generate_jwt_secret)
    local anon_key=$(generate_api_key "anon" "$jwt_secret")
    local service_key=$(generate_api_key "service_role" "$jwt_secret")
    local db_password=$(openssl rand -base64 32 | tr -d '\n')
    
    # Define secret names
    local jwt_secret_name="supabase-${instance}-jwt"
    local anon_key_name="supabase-${instance}-anon"
    local service_key_name="supabase-${instance}-service"
    local db_password_name="supabase-${instance}-dbpass"
    
    # Determine hosts (default to cloud)
    local hosts="cloud"
    
    # Add secrets to secrets.nix
    log_info "Adding secrets to secrets.nix..."
    add_secret_to_nix "$jwt_secret_name" "$hosts"
    add_secret_to_nix "$anon_key_name" "$hosts"
    add_secret_to_nix "$service_key_name" "$hosts"
    add_secret_to_nix "$db_password_name" "$hosts"
    
    # Create secret files
    log_info "Creating encrypted secret files..."
    create_secret_file "$jwt_secret_name" "JWT_SECRET=$jwt_secret"
    create_secret_file "$anon_key_name" "SUPABASE_ANON_KEY=$anon_key"
    create_secret_file "$service_key_name" "SUPABASE_SERVICE_KEY=$service_key"
    create_secret_file "$db_password_name" "DB_PASSWORD=$db_password"
    
    log_success "Supabase instance '$instance' secrets created successfully!"
    
    echo
    echo "Next steps:"
    echo "1. Add the instance to your NixOS configuration:"
    echo "   constellation.supabase.instances.${instance} = {"
    echo "     enable = true;"
    echo "     subdomain = \"${instance}\";"
    echo "     jwtSecret = \"${jwt_secret_name}\";"
    echo "     anonKey = \"${anon_key_name}\";"
    echo "     serviceKey = \"${service_key_name}\";"
    echo "     dbPassword = \"${db_password_name}\";"
    echo "     storage.bucket = \"supabase-${instance}-storage\";"
    echo "   };"
    echo
    echo "2. Deploy the configuration:"
    echo "   just deploy <hostname>"
    echo
    echo "API Keys (encrypted in secrets):"
    echo "  JWT Secret: ${jwt_secret_name}"
    echo "  Anon Key: ${anon_key_name}"
    echo "  Service Key: ${service_key_name}"
    echo "  DB Password: ${db_password_name}"
}

main "$@"