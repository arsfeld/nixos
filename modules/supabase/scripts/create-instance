#!/usr/bin/env bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
REPO_ROOT="$(git rev-parse --show-toplevel)"
SECRETS_DIR="${REPO_ROOT}/secrets"
SECRETS_NIX="${SECRETS_DIR}/secrets.nix"

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check dependencies
check_dependencies() {
    local deps=("agenix" "openssl" "jq")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            log_error "Required dependency '$dep' not found"
            exit 1
        fi
    done
}

# Generate JWT secret
generate_jwt_secret() {
    # Generate at least 32 characters for security
    openssl rand -base64 48 | tr -d '\n='
}

# Generate secure password
generate_password() {
    openssl rand -base64 32 | tr -d '\n='
}

# Generate Supabase API key
generate_api_key() {
    local role="$1"
    local jwt_secret="$2"
    
    # Create JWT payload
    local iat=$(date +%s)
    local exp=$((iat + 365 * 24 * 60 * 60)) # 1 year from now
    
    local header='{"alg":"HS256","typ":"JWT"}'
    local payload=$(jq -c -n \
        --arg role "$role" \
        --arg iss "supabase" \
        --argjson iat "$iat" \
        --argjson exp "$exp" \
        '{"role": $role, "iss": $iss, "iat": $iat, "exp": $exp}')
    
    # Base64 encode header and payload
    local header_b64=$(echo -n "$header" | base64 -w 0 | tr -d '=' | tr '+/' '-_')
    local payload_b64=$(echo -n "$payload" | base64 -w 0 | tr -d '=' | tr '+/' '-_')
    
    # Create signature
    local signature=$(echo -n "${header_b64}.${payload_b64}" | openssl dgst -sha256 -hmac "$jwt_secret" -binary | base64 -w 0 | tr -d '=' | tr '+/' '-_')
    
    echo "${header_b64}.${payload_b64}.${signature}"
}

# Generate complete .env file content
generate_env_file() {
    local instance="$1"
    local jwt_secret="$2"
    local anon_key="$3"
    local service_key="$4"
    local postgres_password="$5"
    
    cat <<EOF
############
# Secrets
# Generated for Supabase instance: ${instance}
############

POSTGRES_PASSWORD=${postgres_password}
JWT_SECRET=${jwt_secret}
ANON_KEY=${anon_key}
SERVICE_ROLE_KEY=${service_key}
DASHBOARD_USERNAME=supabase
DASHBOARD_PASSWORD=$(generate_password)
SECRET_KEY_BASE=$(generate_password)
VAULT_ENC_KEY=$(generate_password)

############
# Database - You can change these to any PostgreSQL database that has logical replication enabled.
############

POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_PORT=5432
# default user is postgres

############
# Supavisor -- Database pooler
############
POOLER_PROXY_PORT_TRANSACTION=6543
POOLER_DEFAULT_POOL_SIZE=20
POOLER_MAX_CLIENT_CONN=100
POOLER_TENANT_ID=${instance}

############
# API Proxy - Configuration for the Kong Reverse proxy.
############

KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443

############
# API - Configuration for PostgREST.
############

PGRST_DB_SCHEMAS=public,storage,graphql_public

############
# Auth - Configuration for the GoTrue authentication server.
############

## General
SITE_URL=https://${instance}.example.com
ADDITIONAL_REDIRECT_URLS=
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
API_EXTERNAL_URL=https://${instance}.example.com

## Mailer Config
MAILER_URLPATHS_CONFIRMATION="/auth/v1/verify"
MAILER_URLPATHS_INVITE="/auth/v1/verify"
MAILER_URLPATHS_RECOVERY="/auth/v1/verify"
MAILER_URLPATHS_EMAIL_CHANGE="/auth/v1/verify"

## Email auth
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=false
SMTP_ADMIN_EMAIL=admin@example.com
SMTP_HOST=supabase-mail
SMTP_PORT=2500
SMTP_USER=fake_mail_user
SMTP_PASS=fake_mail_password
SMTP_SENDER_NAME=fake_sender
ENABLE_ANONYMOUS_USERS=false

## Phone auth
ENABLE_PHONE_SIGNUP=true
ENABLE_PHONE_AUTOCONFIRM=true

############
# Studio - Configuration for the Dashboard
############

STUDIO_DEFAULT_ORGANIZATION=${instance}
STUDIO_DEFAULT_PROJECT=${instance}

STUDIO_PORT=3000
# replace if you intend to use Studio outside of localhost
SUPABASE_PUBLIC_URL=https://${instance}.example.com

# Enable webp support
IMGPROXY_ENABLE_WEBP_DETECTION=true

# Add your OpenAI API key to enable SQL Editor Assistant
OPENAI_API_KEY=

############
# Functions - Configuration for Functions
############
# NOTE: VERIFY_JWT applies to all functions. Per-function VERIFY_JWT is not supported yet.
FUNCTIONS_VERIFY_JWT=false

############
# Logs - Configuration for Analytics
# Please refer to https://supabase.com/docs/reference/self-hosting-analytics/introduction
############

# Change vector.toml sinks to reflect this change
# these cannot be the same value
LOGFLARE_PUBLIC_ACCESS_TOKEN=$(generate_password)
LOGFLARE_PRIVATE_ACCESS_TOKEN=$(generate_password)

# Docker socket location - this value will differ depending on your OS
DOCKER_SOCKET_LOCATION=/var/run/docker.sock

# Google Cloud Project details
GOOGLE_PROJECT_ID=
GOOGLE_PROJECT_NUMBER=
EOF
}

# Create secret file
create_secret_file() {
    local secret_name="$1"
    local secret_content="$2"
    
    local secret_file="${SECRETS_DIR}/${secret_name}.age"
    
    # Check if secret already exists in secrets.nix
    if ! grep -q "\"${secret_name}.age\"" "$SECRETS_NIX"; then
        log_error "Secret '$secret_name' not found in secrets.nix. Add it first with add_secret_to_nix."
        return 1
    fi
    
    # Create temporary file with secret
    local temp_file=$(mktemp)
    echo -n "$secret_content" > "$temp_file"
    
    # Use agenix to encrypt the secret
    cd "$SECRETS_DIR"
    agenix -e "${secret_name}.age" < "$temp_file"
    
    # Clean up
    rm "$temp_file"
    
    log_success "Created secret file: $secret_file"
}

# Add secret to secrets.nix
add_secret_to_nix() {
    local secret_name="$1"
    local hosts="$2"
    
    # Check if secret already exists
    if grep -q "\"${secret_name}.age\"" "$SECRETS_NIX"; then
        log_warning "Secret '$secret_name' already exists in secrets.nix"
        return 0
    fi
    
    # Add the secret entry
    local entry="  \"${secret_name}.age\".publicKeys = users ++ [${hosts}];"
    
    # Insert before the closing brace
    sed -i "/^}$/i\\$entry" "$SECRETS_NIX"
    
    log_success "Added secret '$secret_name' to secrets.nix"
}

# Main function
main() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: $0 <instance-name>"
        echo "Example: $0 prod"
        exit 1
    fi
    
    local instance="$1"
    
    log_info "Creating Supabase instance: $instance"
    
    # Check dependencies
    check_dependencies
    
    # Generate core secrets
    log_info "Generating secrets..."
    local jwt_secret=$(generate_jwt_secret)
    local anon_key=$(generate_api_key "anon" "$jwt_secret")
    local service_key=$(generate_api_key "service_role" "$jwt_secret")
    local postgres_password=$(generate_password)
    
    # Generate complete .env file
    log_info "Generating .env file..."
    local env_content=$(generate_env_file "$instance" "$jwt_secret" "$anon_key" "$service_key" "$postgres_password")
    
    # Define secret name for the env file
    local env_secret_name="supabase-${instance}-env"
    
    # Determine hosts (default to cloud)
    local hosts="cloud"
    
    # Add secret to secrets.nix
    log_info "Adding secret to secrets.nix..."
    add_secret_to_nix "$env_secret_name" "$hosts"
    
    # Create encrypted secret file
    log_info "Creating encrypted .env file..."
    create_secret_file "$env_secret_name" "$env_content"
    
    log_success "Supabase instance '$instance' created successfully!"
    
    echo
    echo "Next steps:"
    echo "1. Add the instance to your NixOS configuration:"
    echo "   constellation.supabase.instances.${instance} = {"
    echo "     enable = true;"
    echo "     subdomain = \"${instance}\";"
    echo "     envFile = \"${env_secret_name}\";"
    echo "     storage.bucket = \"supabase-${instance}-storage\";"
    echo "   };"
    echo
    echo "2. Update the domain references in the .env file using:"
    echo "   ./update-secret ${instance}"
    echo
    echo "3. Deploy the configuration:"
    echo "   just deploy <hostname>"
    echo
    echo "Important values (stored encrypted in ${env_secret_name}):"
    echo "  JWT Secret: ${jwt_secret:0:10}..."
    echo "  Anon Key: ${anon_key:0:20}..."
    echo "  Service Key: ${service_key:0:20}..."
    echo "  DB Password: ${postgres_password:0:10}..."
}

main "$@"