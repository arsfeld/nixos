#!/usr/bin/env bash

set -euo pipefail

# Colors for output
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

REPO_ROOT="$(git rev-parse --show-toplevel)"
SECRETS_DIR="${REPO_ROOT}/secrets"

# Function to decode agenix secret
decode_secret() {
    local secret_name="$1"
    local secret_file="${SECRETS_DIR}/${secret_name}.age"
    
    if [ -f "$secret_file" ]; then
        if command -v agenix &> /dev/null; then
            # Try to decode with agenix (requires private key)
            cd "$SECRETS_DIR"
            agenix -d "${secret_name}.age" 2>/dev/null || echo "üîí [Encrypted - run on target host to decode]"
        else
            echo "üîí [Encrypted - agenix not available]"
        fi
    else
        echo "‚ùå [Secret file not found]"
    fi
}

# Function to get domain from NixOS configuration
get_domain_for_instance() {
    local instance="$1"
    # Try to extract domain from cloud configuration
    grep -A 30 "constellation\.supabase" "${REPO_ROOT}/hosts/cloud/configuration.nix" 2>/dev/null | \
    grep "defaultDomain" | head -1 | sed 's/.*defaultDomain = "\([^"]*\)".*/\1/' || echo "unknown.domain"
}

# Function to get subdomain for instance
get_subdomain_for_instance() {
    local instance="$1"
    grep -A 15 "${instance}" "${REPO_ROOT}/hosts/cloud/configuration.nix" 2>/dev/null | \
    grep "subdomain" | head -1 | sed 's/.*subdomain = "\([^"]*\)".*/\1/' || echo "$instance"
}

# Function to get port for instance
get_port_for_instance() {
    local instance="$1"
    local port=$(grep -A 10 "instances.*${instance}" "${REPO_ROOT}/hosts/cloud/configuration.nix" 2>/dev/null | \
    grep "port" | head -1 | sed 's/.*port = \([0-9]*\).*/\1/' || echo "")
    
    if [ -z "$port" ] || [ "$port" = "0" ]; then
        echo "8000+ (auto-assigned)"
    else
        echo "$port"
    fi
}

# Main function
main() {
    echo -e "${BLUE}üöÄ Supabase Instances Overview${NC}"
    echo "=================================="
    echo
    
    # Find all Supabase secret files
    supabase_instances=()
    for secret_file in "${SECRETS_DIR}"/supabase-*-jwt.age; do
        if [ -f "$secret_file" ]; then
            instance=$(basename "$secret_file" | sed 's/supabase-\(.*\)-jwt.age/\1/')
            supabase_instances+=("$instance")
        fi
    done
    
    if [ ${#supabase_instances[@]} -eq 0 ]; then
        echo -e "${YELLOW}No Supabase instances found.${NC}"
        echo "Create one with: just supabase-create <instance-name>"
        exit 0
    fi
    
    for instance in "${supabase_instances[@]}"; do
        echo -e "${GREEN}üì¶ Instance: ${instance}${NC}"
        echo "----------------------------------------"
        
        # Get configuration details
        domain=$(get_domain_for_instance "$instance")
        subdomain=$(get_subdomain_for_instance "$instance")
        port=$(get_port_for_instance "$instance")
        
        # Service status
        if systemctl is-active --quiet "supabase-${instance}" 2>/dev/null; then
            echo -e "Status: ${GREEN}‚úÖ Running${NC}"
        else
            echo -e "Status: ${YELLOW}‚è∏Ô∏è  Stopped${NC}"
        fi
        
        echo "Port: $port"
        echo
        
        # API Endpoints
        echo -e "${CYAN}üåê API Endpoints:${NC}"
        echo "  Base URL:  https://${subdomain}.${domain}"
        echo "  REST API:  https://${subdomain}.${domain}/rest/v1/"
        echo "  Auth:      https://${subdomain}.${domain}/auth/v1/"
        echo "  Storage:   https://${subdomain}.${domain}/storage/v1/"
        echo "  Realtime:  wss://${subdomain}.${domain}/realtime/v1/websocket"
        echo
        
        # Database Info
        echo -e "${CYAN}üóÑÔ∏è  Database:${NC}"
        echo "  Database:  postgres"
        echo "  User:      postgres"
        echo "  Password:  $(decode_secret "supabase-${instance}-dbpass")"
        echo
        
        # API Keys
        echo -e "${CYAN}üîë API Keys:${NC}"
        echo "  JWT Secret:    $(decode_secret "supabase-${instance}-jwt")"
        echo "  Anon Key:      $(decode_secret "supabase-${instance}-anon")"
        echo "  Service Key:   $(decode_secret "supabase-${instance}-service")"
        echo
        
        # Usage Examples
        echo -e "${CYAN}üí° Usage Examples:${NC}"
        echo "  # Initialize Supabase client"
        echo "  const supabase = createClient("
        echo "    'https://${subdomain}.${domain}',"
        echo "    'ANON_KEY_FROM_ABOVE'"
        echo "  )"
        echo
        echo "  # cURL example"
        echo "  curl -X GET 'https://${subdomain}.${domain}/rest/v1/your_table' \\"
        echo "       -H \"apikey: ANON_KEY_FROM_ABOVE\" \\"
        echo "       -H \"Authorization: Bearer ANON_KEY_FROM_ABOVE\""
        echo
        echo "========================================"
        echo
    done
    
    echo -e "${BLUE}üõ†Ô∏è  Management Commands:${NC}"
    echo "  just supabase-create <name>     - Create new instance"
    echo "  just supabase-delete <name>     - Delete instance"
    echo "  just supabase-status            - Show service status"
    echo "  just supabase-update-secret <name> <type> - Update secrets"
}

main "$@"