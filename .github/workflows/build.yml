name: "Build"

on:
  push:
    branches: [main, master]
  workflow_dispatch:
  workflow_call:
    inputs:
      flake_lock:
        description: "Content of flake.lock file"
        required: false
        type: string
      activation_mode:
        description: "Activation mode (boot or dry-activate)"
        required: false
        type: string
        default: "boot"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job that builds all machines
  build-matrix:
    strategy:
      fail-fast: false
      matrix:
        machine:
          - host: cloud
            platform: aarch64-linux
          - host: storage
            platform: x86-64-linux

    name: Build ${{ matrix.machine.host }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
    outputs:
      host: ${{ matrix.machine.host }}
      platform: ${{ matrix.machine.platform }}
      status: ${{ steps.build_system.outcome }}
      duration: ${{ steps.calculate_duration.outputs.duration }}
    steps:
      - name: Record start time
        id: start_time
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Free up disk space
        run: |
          set -euo pipefail

          # Display initial disk space
          echo "📚 Disk space before cleanup:"
          df -h

          # Remove unnecessary large packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL

          # Clean apt cache
          sudo apt clean
          sudo apt autoremove --yes

          # Remove Docker images
          docker image prune --all --force

          # Display disk space after cleanup:
          echo "📚 Disk space after cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup QEMU for aarch64
        if: matrix.machine.platform == 'aarch64-linux'
        uses: docker/setup-qemu-action@v3

      - name: Setup Tailscale
        id: tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          version: 1.82.0
        timeout-minutes: 2

      - uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: extra-platforms = aarch64-linux i686-linux
      
      - uses: cachix/cachix-action@v14
        with:
          name: devenv

      - name: Install devenv.sh
        run: nix profile install nixpkgs#devenv

      - name: Build system
        id: build_system
        shell: devenv shell bash -- -e {0}
        run: |
          set -euo pipefail

          # If flake_lock input is provided, use it
          if [ -n "${{ inputs.flake_lock || '' }}" ]; then
            echo "🛠️ Using provided flake.lock content"
            echo '${{ inputs.flake_lock }}' | base64 -d > flake.lock
          fi

          # Function to retry commands with timeout
          retry() {
            local max_attempts=3
            local attempt=1
            local delay=5
            local timeout=60
            
            until timeout $timeout "$@"; do
              if ((attempt == max_attempts)); then
                echo "🐛 Command '$*' failed after $max_attempts attempts"
                return 1
              fi
              
              echo "⏪ Command '$*' failed, attempt $attempt of $max_attempts. Retrying in ${delay}s..."
              sleep $delay
              ((attempt++))
            done
          }

          # Check if required secrets exist
          if [ -z "${{ secrets.ATTIC_TOKEN }}" ]; then
            echo "::error::🐛 ATTIC_TOKEN secret is not set"
            exit 1
          fi

          # Login to Attic and build
          retry attic login cloud https://fly-attic.fly.dev/system ${{ secrets.ATTIC_TOKEN }}
          retry attic use system

          # Wake up fly machine
          echo "✨ Waking up Fly machine..."
          retry attic cache info system

          # Setup SSH for Tailscale hosts
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          echo "UserKnownHostsFile /dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

          # Start Attic watch-store in background with proper process management
          attic_pid=""
          function cleanup {
            if [ -n "$attic_pid" ]; then
              echo "🧹 Cleaning up attic watch-store process ($attic_pid)"
              kill $attic_pid || true
            fi
          }
          trap cleanup EXIT

          echo "✨ Starting Attic watch-store..."
          attic watch-store system &
          attic_pid=$!

          # Build the system
          echo "🛠️ Building for ${{ matrix.machine.host }}..."
          deploy --remote-build=false --skip-checks \
            --targets ".#${{ matrix.machine.host }}" \
            --${{ inputs.activation_mode || 'boot' }}

          # Ensure we know if the build succeeded
          echo "::notice::🚀 Build succeeded for ${{ matrix.machine.host }}"

      - name: Calculate build duration
        id: calculate_duration
        if: always()
        run: |
          end_time=$(date +%s)
          duration=$((end_time - ${{ steps.start_time.outputs.start_time }}))
          echo "duration=$duration" >> $GITHUB_OUTPUT

  # Job that generates a summary of the build results
  summarize-build:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build-matrix
    if: always()
    steps:
      - name: Generate build summary
        run: |
          echo "### 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Host | Platform | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|---|---|" >> $GITHUB_STEP_SUMMARY
          echo '${{ toJSON(needs.build-matrix.outputs) }}' | jq -c '.[]' | while read -r job; do
            host=$(echo "$job" | jq -r '.host')
            platform=$(echo "$job" | jq -r '.platform')
            status=$(echo "$job" | jq -r '.status')
            duration_seconds=$(echo "$job" | jq -r '.duration')
            
            # Format duration
            if [[ "$duration_seconds" -lt 60 ]]; then
              duration="${duration_seconds}s"
            else
              minutes=$((duration_seconds / 60))
              seconds=$((duration_seconds % 60))
              duration="${minutes}m ${seconds}s"
            fi

            # Format status
            if [[ "$status" == "success" ]]; then
              status_icon="✅"
            else
              status_icon="❌"
            fi

            echo "| $host | $platform | $status_icon $status | $duration |" >> $GITHUB_STEP_SUMMARY
          done
