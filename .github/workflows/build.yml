name: "Build"

on:
  push:
    branches: [main, master]
  workflow_dispatch:
  workflow_call:
    inputs:
      flake_lock:
        description: "Content of flake.lock file"
        required: false
        type: string
      activation_mode:
        description: "Activation mode (boot or dry-activate)"
        required: false
        type: string
        default: "boot"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job that builds all machines
  build-matrix:
    strategy:
      fail-fast: false
      matrix:
        machine:
          - host: cloud
            platform: aarch64-linux
          - host: storage
            platform: x86-64-linux

    name: Build ${{ matrix.machine.host }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
    outputs:
      host: ${{ matrix.machine.host }}
      platform: ${{ matrix.machine.platform }}
      status: ${{ steps.build_system.outcome }}
      duration: ${{ steps.calculate_duration.outputs.duration }}
    steps:
      - name: Record start time
        id: start_time
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Free up disk space
        run: |
          set -euo pipefail

          # Display initial disk space
          echo "📚 Disk space before cleanup:"
          df -h

          # Remove unnecessary large packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL

          # Clean apt cache
          sudo apt clean
          sudo apt autoremove --yes

          # Remove Docker images
          docker image prune --all --force

          # Display disk space after cleanup:
          echo "📚 Disk space after cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup QEMU for aarch64
        if: matrix.machine.platform == 'aarch64-linux'
        uses: docker/setup-qemu-action@v3

      - name: Setup Tailscale
        id: tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          version: 1.82.0
        timeout-minutes: 2

      - uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: extra-platforms = aarch64-linux i686-linux

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Build system
        id: build_system
        shell: nix develop --command bash -e {0}
        run: |
          set -euo pipefail

          # If flake_lock input is provided, use it
          if [ -n "${{ inputs.flake_lock || '' }}" ]; then
            echo "🛠️ Using provided flake.lock content"
            echo '${{ inputs.flake_lock }}' | base64 -d > flake.lock
          fi

          # Setup SSH for Tailscale hosts
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          echo "UserKnownHostsFile /dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

          # Build the system
          echo "🛠️ Building for ${{ matrix.machine.host }}..."
          deploy --skip-checks \
            --targets ".#${{ matrix.machine.host }}" \
            --${{ inputs.activation_mode || 'boot' }}

          # Ensure we know if the build succeeded
          echo "::notice::🚀 Build succeeded for ${{ matrix.machine.host }}"

      - name: Calculate build duration
        id: calculate_duration
        if: always()
        run: |
          end_time=$(date +%s)
          duration=$((end_time - ${{ steps.start_time.outputs.start_time }}))
          echo "duration=$duration" >> $GITHUB_OUTPUT

  # Job that generates a summary of the build results
  summarize-build:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build-matrix
    if: always()
    permissions:
      actions: read
    steps:
      - name: Generate build summary
        uses: actions/github-script@v7
        with:
          script: |
            // Get the current run ID
            const runId = context.runId;
            
            // Get all jobs for this workflow run
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
            });
            
            // Filter for build-matrix jobs
            const buildJobs = jobs.jobs.filter(job => job.name.startsWith('Build '));
            
            // Generate summary table
            let summary = '### 🚀 Build Summary\n\n';
            summary += '| Host | Platform | Status | Duration |\n';
            summary += '|---|---|---|---|\n';
            
            for (const job of buildJobs) {
              // Extract host name from job name (e.g., "Build cloud" -> "cloud")
              const host = job.name.replace('Build ', '');
              
              // Get platform from the matrix config
              let platform = 'unknown';
              if (host === 'cloud') platform = 'aarch64-linux';
              else if (host === 'storage') platform = 'x86-64-linux';
              
              // Calculate duration
              const startTime = new Date(job.started_at);
              const endTime = new Date(job.completed_at || Date.now());
              const durationSeconds = Math.floor((endTime - startTime) / 1000);
              
              let duration;
              if (durationSeconds < 60) {
                duration = `${durationSeconds}s`;
              } else {
                const minutes = Math.floor(durationSeconds / 60);
                const seconds = durationSeconds % 60;
                duration = `${minutes}m ${seconds}s`;
              }
              
              // Format status
              const statusIcon = job.conclusion === 'success' ? '✅' : '❌';
              const status = job.conclusion || 'in_progress';
              
              summary += `| ${host} | ${platform} | ${statusIcon} ${status} | ${duration} |\n`;
            }
            
            // Write to summary
            await core.summary.addRaw(summary).write();
